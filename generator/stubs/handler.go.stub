package handlers

import (
	"boilerplate/models"
	repositories "boilerplate/repositories"
	"encoding/json"
	"fmt"
	"github.com/gofiber/fiber/v2"
)

func {{.Model}}List(c *fiber.Ctx) error {
	{{.Data}}s, err := repositories.{{.Model}}Get()
	if err != nil {
		return Response(c, nil, err)
	}
	return Response(c, {{.Data}}s, nil)
}
func {{.Model}}GetById(c *fiber.Ctx) error {
	fmt.Println(c.Params("id"))
	{{.Data}}, err := repositories.{{.Model}}GetById(c.Params("id"))
	if err != nil {
		return Response(c, nil, err)
	}
	return Response(c, {{.Data}}, nil)
}

func {{.Model}}Create(c *fiber.Ctx) error {
	if c.Is("json") {
		var {{.Data}} models.{{.Model}}
		err := json.Unmarshal(c.Body(), &{{.Data}})
		if err != nil {
			return Response(c, nil, err)
		}
		createErr := repositories.{{.Model}}Create({{.Data}})
		if createErr != nil {
			return Response(c, nil, createErr)
		}
		return Response(c, {{.Data}}, nil)
	}
	return Response(c, nil, fmt.Errorf("invalid Content-Type"))
}
func {{.Model}}Update(c *fiber.Ctx) error {
	if c.Is("json") && c.Params("id") != "" {
		{{.Data}}, errGet := repositories.{{.Model}}GetById(c.Params("id"))
		if errGet != nil {
			return Response(c, nil, errGet)
		}
		err := json.Unmarshal(c.Body(), &{{.Data}})
		if err != nil {
			return Response(c, nil, err)
		}
		updateErr := repositories.{{.Model}}Update({{.Data}})
		if updateErr != nil {
			return Response(c, nil, updateErr)
		}
		return Response(c, {{.Data}}, nil)
	}
	return Response(c, nil, fmt.Errorf("invalid Content-Type or ID Param not found"))
}
func {{.Model}}Delete(c *fiber.Ctx) error {
	if c.Params("id") != "" {
		{{.Data}}, errGet := repositories.{{.Model}}GetById(c.Params("id"))
		if errGet != nil {
			return Response(c, nil, errGet)
		}
		deleteErr := repositories.{{.Model}}Delete({{.Data}})
		if deleteErr != nil {
			return Response(c, nil, deleteErr)
		}
		return Response(c, "Successfully Deleted", nil)
	}
	return Response(c, nil, fmt.Errorf("invalid ID Param not found"))

}
